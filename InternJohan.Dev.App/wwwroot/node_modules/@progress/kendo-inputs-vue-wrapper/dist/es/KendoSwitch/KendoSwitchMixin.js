'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _kendoBaseComponentsVueWrapper = require('@progress/kendo-base-components-vue-wrapper');

var _SwitchProps = require('./SwitchProps');

var _SwitchProps2 = _interopRequireDefault(_SwitchProps);

var _ObsoleteSwitchProps = require('./ObsoleteSwitchProps');

var _ObsoleteSwitchProps2 = _interopRequireDefault(_ObsoleteSwitchProps);

var _Messages = require('./Messages');

var _Messages2 = _interopRequireDefault(_Messages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    emits: {
        'update:modelValue': null,
        'kendowidgetready': null
    },
    props: Object.assign({}, _SwitchProps2.default, _ObsoleteSwitchProps2.default),
    mixins: [_kendoBaseComponentsVueWrapper.KendoBaseComponent, _Messages2.default],
    updated: function updated() {
        var kWidget = this.kendoWidget();

        if (this.modelValue !== kWidget.check()) {
            kWidget.check(this.modelValue);
        }
    },
    mounted: function mounted() {
        var that = this;

        that.widgetOptions.messages = that.widgetOptions.messages || {};

        // Obsolete props
        if (that.widgetOptions.onLabel) {
            that.widgetOptions.messages.checked = that.widgetOptions.onLabel;
        }

        if (that.widgetOptions.offLabel) {
            that.widgetOptions.messages.unchecked = that.widgetOptions.offLabel;
        }

        if (that.widgetOptions.enable == false) {
            that.widgetOptions.enabled = that.widgetOptions.enable;
        }
        kendo.jQuery(that.$el).kendoSwitch(that.widgetOptions);

        that.$_kendoSwitch = that.kendoWidget();
        if (this.v3) {
            this.ready();
            this.$emit('kendowidgetready', this.kendoWidget());
        } else {
            this.$emit('kendowidgetready', this.kendoWidget());
        }

        that.kendoWidget().bind('change', function () {
            if (that.v3) {
                that.$emit('update:modelValue', that.kendoWidget().check());
            } else {
                that.$emit('changemodel', that.kendoWidget().check());
            }
        });
    },

    methods: {
        kendoWidget: function kendoWidget() {
            return kendo.jQuery(this.$el).getKendoSwitch();
        }
    },
    destroyed: function destroyed() {
        var switchInstance = this.kendoWidget() || this.$_kendoSwitch;
        switchInstance.destroy();
        switchInstance.wrapper.remove();
    },

    watch: {
        checked: function checked(value) {
            var kWidget = this.kendoWidget();

            if (value != kWidget.check()) {
                kWidget.check(value);
            }
        }
    },
    model: {
        event: 'changemodel',
        prop: 'checked'
    }
};
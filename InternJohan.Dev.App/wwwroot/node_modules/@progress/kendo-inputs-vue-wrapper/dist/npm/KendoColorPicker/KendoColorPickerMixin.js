'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _kendoBaseComponentsVueWrapper = require('@progress/kendo-base-components-vue-wrapper');

var _ColorPickerProps = require('./ColorPickerProps');

var _ColorPickerProps2 = _interopRequireDefault(_ColorPickerProps);

var _Messages = require('./Messages');

var _Messages2 = _interopRequireDefault(_Messages);

var _TileSize = require('../Common/TileSize');

var _TileSize2 = _interopRequireDefault(_TileSize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    emits: {
        'update:modelValue': null,
        'kendowidgetready': null
    },
    props: _ColorPickerProps2.default,
    mixins: [_kendoBaseComponentsVueWrapper.KendoBaseComponent, _kendoBaseComponentsVueWrapper.KendoBaseInputComponent, _Messages2.default, _TileSize2.default],
    mounted() {
        var that = this;
        kendo.jQuery(that.$el).kendoColorPicker(that.widgetOptions);

        if (this.v3) {
            this.ready();
            this.$emit('kendowidgetready', this.kendoWidget());
        } else {
            this.$emit('kendowidgetready', this.kendoWidget());
        }

        that.kendoWidget().bind('change', function () {
            var kendoWidget = that.kendoWidget();
            var inputElement = kendoWidget.element;
            if (that.v3) {
                that.$emit('update:modelValue', inputElement.val());
            } else {
                that.$emit('changemodel', inputElement.val());
            }
        });
    },
    methods: {
        kendoWidget() {
            return kendo.jQuery(this.$el).getKendoColorPicker();
        }
    }
};